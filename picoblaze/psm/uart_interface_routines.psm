
                   ;
                   ;
                   ; UART Status
                   ; -----------
                   ;
;
                   ;
                   ; Write data to UART_TX6
                   ; ----------------------
                   ;
;                   CONSTANT UART_TX6_output_port, 01
                   ;
                   ; Read data from UART_RX6
                   ; -----------------------
                   ;
;                  CONSTANT UART_RX6_input_port, 01
                   ;
                   ; Reset UART buffers (Constant Optimised Port)
                   ; --------------------------------------------
                   ;
;        	   CONSTANT reset_UART_port, 01
                   CONSTANT UART_tx_reset, 00000001'b        ; uart_tx6 reset - bit0
                   CONSTANT UART_rx_reset, 00000010'b        ; uart_rx6 reset - bit1
                   CONSTANT UART_reset, 00000011'b           ; reset Tx and Rx
                   CONSTANT UART_operate, 00000000'b         ; Tx and Rx free to operate
                   ;
                   ;
                   ;--------------------------------------------------------------------------------------
                   ; Routine to reset UART Buffers inside 'uart_tx6' and 'uart_rx6'
                   ;--------------------------------------------------------------------------------------
                   ;
                   ; This routine will generate and apply an active High reset pulse to  the FIFO
                   ; buffers in both the transmitter and receiver macros.
                   ;
                   ; Note that the reset signals have been assigned to a constant optimised output port
                   ; so the 'OUTPUTK' instructions are used and no registers contents are affected.
                   ;
                   ;
reset_UART_macros: OUTPUTK UART_reset, reset_UART_port
                   OUTPUTK UART_operate, reset_UART_port
                   RETURN 
                   ;
                   ;
                   ;--------------------------------------------------------------------------------------
                   ; Routine to send one character to the UART Transmitter 'uart_tx6'
                   ;--------------------------------------------------------------------------------------
                   ;
                   ; This routine will transmit the character provided in register 's5'.
                   ;
                   ; Before the character is output to the 'UART_TX6' macro the status of the FIFO buffer
                   ; is checked to see if there is space. If the buffer is full then this routine will
                   ; wait for space to become available (e.g. the time required for a previous character
                   ; to be transmitted by the UART).
                   ;
                   ; Registers used s0 and s5 for the data (which is preserved)
                   ;
          UART_TX: INPUT s0, UART_status_port                ;Check if buffer is full
                   TEST s0, UART_Tx_full
                   JUMP NZ, UART_TX                          ;wait if full
                   OUTPUT s5, UART_TX6_output_port
                   RETURN 
                   ;
                   ;
                   ;--------------------------------------------------------------------------------------
                   ; Routine to attempt to receive one character from the UART Receiver 'uart_rx6'
                   ;--------------------------------------------------------------------------------------
                   ;
                   ; This routine will attempt to receive one character from the 'UART_RX6' macro, and if
                   ; successful, will return that character in register 's5' and the Zero flag will be
                   ; reset (Z=0).
                   ;
                   ; If there are no characters available to be read from the FIFO buffer within the
                   ; 'UART_RX6' macro then this routine will timeout after ~2,000 clock cycles (which is
                   ; 40us at 50MHz) with the Zero flag set (Z=1). This timeout scheme ensures that KCPSM6
                   ; cannot become stuck in this routine if no characters are received. If you do want
                   ; KCPSM6 to wait indefinitely for a character to be received then either modify this
                   ; routine or perform a test of the Zero flag and repeat the call to this routine as
                   ; shown in this example...
                   ;
                   ;          wait_for_UART_RX: CALL UART_RX
                   ;                            JUMP Z, wait_for_UART_RX
                   ;
                   ;
                   ; Registers used s0, s1 and s5.
                   ;
UART_RX_wait:
	CALL UART_RX
	RETURN NZ
	JUMP UART_RX_wait
	

UART_RX: LOAD s1, 167'd                            ;Timeout = 167 x (6 instructions x 2 clock cycles)
rx_timeout: INPUT s0, UART_status_port
                   TEST s0, UART_Rx_data_present             ;Z=0 and C=1 when data present
                   JUMP NZ, read_Rx
                   SUB s1, 1'd
                   RETURN Z                                  ;Timeout returns with Z=1 and C=0
                   JUMP rx_timeout
                   ;
          read_Rx: INPUT s5, UART_RX6_input_port             ;read character from buffer
                   RETURN 
                   ;
                   ;
                   ;------------------------------------------------------------------------------------------
                   ; End of 'uart_interface_routines.psm"'
                   ;------------------------------------------------------------------------------------------
                   ;
